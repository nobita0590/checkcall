package main

import (
	"fmt" // optional

	"gopkg.in/kataras/iris.v6"
	"gopkg.in/kataras/iris.v6/adaptors/httprouter"
	"gopkg.in/kataras/iris.v6/adaptors/view"
	"gopkg.in/kataras/iris.v6/adaptors/websocket"
	"io/ioutil"
	"encoding/json"
	"net/http"
	"strings"
)

type TargetUrl struct {
	HangupUrl   string
	CallUrl     string
	Token       string
}

var myChatRoom = "room1"

/*
func newCorsMiddleware() iris.HandlerFunc {
	options := cors.Options{
		AllowedOrigins: []string{"*"},
		AllowCredentials: true,
	}
	handlerWithNext := cors.New(options)

	// this is the only func you will have to use if you're going
	// to make use of any external net/http middleware.
	// iris.ToHandler converts the net/http middleware to an iris-compatible.
	return iris.ToHandler(handlerWithNext)
}
*/

func main() {
	config,err := getConfig()
	if err != nil {
		panic(err)
	}else{
		fmt.Printf("config is %+v",config)
	}
	app := iris.New()
	app.Adapt(iris.DevLogger())                  // enable all (error) logs
	app.Adapt(httprouter.New())                  // select the httprouter as the servemux
	app.Adapt(view.HTML("./templates", ".html")) // select the html engine to serve templates

	ws := websocket.New(websocket.Config{
		// the path which the websocket client should listen/registered to,
		Endpoint: "/check_call",
		// the client-side javascript static file path
		// which will be served by Iris.
		// default is /iris-ws.js
		// if you change that you have to change the bottom of templates/client.html
		// script tag:
		ClientSourcePath: "/iris-ws.js",
		//
		// Set the timeouts, 0 means no timeout
		// websocket has more configuration, go to ../../config.go for more:
		// WriteTimeout: 0,
		// ReadTimeout:  0,
		// by-default all origins are accepted, you can change this behavior by setting:
		// CheckOrigin: (r *http.Request ) bool {},
		//
		//
		// IDGenerator used to create (and later on, set)
		// an ID for each incoming websocket connections (clients).
		// The request is an argument which you can use to generate the ID (from headers for example).
		// If empty then the ID is generated by DefaultIDGenerator: randomString(64):
		// IDGenerator func(ctx *iris.Context) string {},
		CheckOrigin    :  func(r *http.Request) bool {
			fmt.Println(r.Host)
			return true
		},
	})

	app.Adapt(ws) // adapt the websocket server, you can adapt more than one with different Endpoint

	app.StaticWeb("/js", "./static/js") // serve our custom javascript code
	app.Get("/", func(ctx *iris.Context) {
		ctx.Render("client.html", iris.Map{"Client Page": ctx.Host(),"Host":ctx.Host()})
	})

	app.Post("/hangup", func(ctx *iris.Context) {
		ctx.FormValues()
		urlData := ctx.Request.Form
		resp, err := http.Post(config.CallUrl, "application/x-www-form-urlencoded", strings.NewReader(urlData.Encode()))

		if err != nil {
			ctx.JSON(iris.StatusNotFound,iris.Map{
				"error" : err,
			})
		}else{
			body, _ := ioutil.ReadAll(resp.Body)
			ctx.SetHeader("Content-Type","application/json")
			ctx.Data(resp.StatusCode,body)
		}
	})

	app.Post("/call", func(ctx *iris.Context) {
		ctx.FormValues()
		urlData := ctx.Request.Form
		resp, err := http.Post(config.CallUrl, "application/x-www-form-urlencoded", strings.NewReader(urlData.Encode()))

		if err != nil {
			ctx.JSON(iris.StatusNotFound,iris.Map{
				"error" : err,
			})
		}else{
			sendCall(ws,iris.Map{"mess":"Had the call"})
			body, _ := ioutil.ReadAll(resp.Body)
			if data,ok := body.(map[string]interface{});ok{
				fmt.Println(data)
			}
			ctx.SetHeader("Content-Type","application/json")
			ctx.Data(resp.StatusCode,body)
		}
	})



	ws.GetConnectionsByRoom(myChatRoom)

	ws.OnConnection(func(c websocket.Connection) {
		c.Join(myChatRoom)
		fmt.Println("Has a connection")

		c.On("chat", func(message string) {
			if message == "leave" {
				c.Leave(myChatRoom)
				c.To(myChatRoom).Emit("chat", "Client with ID: "+c.ID()+" left from the room and cannot send or receive message to/from this room.")
				c.Emit("chat", "You have left from the room: "+myChatRoom+" you cannot send or receive any messages from others inside that room.")
				return
			}
			c.To(myChatRoom).Emit("chat", "From: "+c.ID()+": "+message)
		})

		// or create a new leave event
		// c.On("leave", func() {
		// 	c.Leave(myChatRoom)
		// })

		c.OnDisconnect(func() {
			fmt.Printf("Connection with ID: %s has been disconnected!\n", c.ID())
		})
	})

	app.Listen(":8080")
}

func sendCall(s websocket.Server,data interface{} )  {
	all := s.GetConnectionsByRoom(myChatRoom)
	for _,conn := range all {
		conn.Emit("call",data)
	}
}

func getConfig() (target TargetUrl,err error) {
	content, err := ioutil.ReadFile("./config/config.json")
	if err != nil {
		return
	}
	err = json.Unmarshal(content,&target)
	return
}
